import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;

import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/**
 * Class for handling most of the UI functionality for this PDF analytics application, including three 
 * tabs and their various widgets for the report, metrics and table generation features
 * 
 * @author Shantanu Vats
 * @version 1.0
 * @since 28/04/22
 */
public class FileInputScreen {
	/**
	 * The file path of the file selected in the FileDialog widget - excluding the file name and extension
	 */
	private static String filePath;
	/**
	 * The file name of the file selected in the FileDialog widget, including the file extension but not including 
	 * the file system path
	 */
	public static String fileName = "";
	/**
	 * The array of up to six search keywords that can be provided to generate an automated report for each 
	 * keyword 
	 */
	public static String[] words = {"", "", "", "", "", ""};
	/**
	 * ArrayList for holding all identified metrics (measure, value, date) generated by the MetricsGenerator class
	 */
	private static ArrayList<String> outputMetrics = new ArrayList<String>();
	/**
	 * Counter representing the number of times minus one that metrics have been generated in the current session,
	 * for the purpose of adding a new SelectionListener to the FileSubmitButton in tab2 after the first time that
	 * metrics have been generated
	 */
	private static int genValueCount;
	/**
	 * The file system path of the save location chosen by the user
	 */
	private static String saveLocationPath;
	/**
	 * Constructor for creating a new FileInputScreen object and initialising the file path to an empty string
	 */
	public FileInputScreen() {
		filePath = "";
	}
	/**
	 * Setter for setting the filePath variable to the provided string parameter
	 * @param path     A file system path string for a selected file in a FileDialog, excluding the file name
	 *                 and extension
	 */
	public static void setFilePath(String path) {
		filePath = path;
	}
	/**
	 * Getter for getting the value of the filePath variable
	 * @return         A file path string representing the file path of the selected file in the FileDialog 
	 *                 excluding the file name and extension
	 */
	public static String getFilePath() {
		return filePath;
	}
	/**
	 * Set the value of the saveLocationPath property with a user provided value
	 * @param savePath     A file system path that corresponds to the user's desired save directory
	 */
	public static void setSaveLocationPath(String savePath) {
		saveLocationPath = savePath;
	}
	/**
	 * Get the value of the saveLocationPath property
	 * @return     String representing the value of the saveLocationPath property
	 */
	public static String getSaveLocationPath() {
		return saveLocationPath;
	}
	/**
	 * Handles the UI functionality for tab one in the TabFolder, corresponding to the reports feature which is
	 * used to generate an automated PDF report based on keywords provided by the user
	 * @param tf       The TabFolder that the TabItem belongs to
	 * @param shell    The Shell that the TabFolder belongs to
	 * @param display  The Display that the Shell that holds the TabFolder belongs to
	 * @return         A TabItem representing the reports tab
	 */
	private static TabItem tab1(TabFolder tf, Shell shell, Display display) {
		setSaveLocationPath("");
		/**
		 * The TabItem representing the reports tab
		 */
		TabItem report = new TabItem(tf, SWT.BORDER);
		report.setText("Reports");
		/**
		 * A Composite that acts as the parent of all the widgets in the reports tab
		 */
		Composite content = new Composite(tf, SWT.NONE);
		/**
		 * A GridLayout that provides a three column grid to Composite content
		 */
		GridLayout gridLayout = new GridLayout(3, true);
		gridLayout.horizontalSpacing = 10;
		gridLayout.marginLeft = 5;
		gridLayout.marginTop = 5;
		content.setLayout(gridLayout);
		content.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
		/**
		 * A label that represents the file name selected in the FileDialog
		 */
        Label label = new Label(content, SWT.NONE);
        label.setText("Filename: ");
        /**
         * A GridData object that allows the file name label to fill the extra horizontal space from resizing the
         * window
         */
        GridData gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 2;
        label.setLayoutData(gridData);
		/**
		 * Button that opens a FileDialog when clicked
		 */
		final Button fileUploadButton = new Button(content, SWT.PUSH);
		fileUploadButton.setText("Choose File...");
		fileUploadButton.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
		
		/**
		 * Displays the directory that is selected by the user in the save file dialog
		 */
		Label saveLabel = new Label(content, SWT.NONE);
		gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 2;
        saveLabel.setLayoutData(gridData);
        saveLabel.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
        saveLabel.setText("Save location: ");
        /**
         * Button that allows the user to select the directory where the generated report will be saved
         */
        Button saveButton = new Button(content, SWT.PUSH);
        saveButton.setText("Save...");
        saveButton.setLayoutData(new GridData(SWT.FILL, SWT.END, true, false));
		
		fileUploadButton.addSelectionListener(new SelectionListener() {
			/**
			 * When the file upload button is selected, opens a FileDialog and sets the fileName variable to the
			 * file name of the file selected by the user, sets the filePath variable to the file path of the file
			 * selected and alters the file name label by the value of the fileName variable
			 * @param event     The click of the button
			 */
			public void widgetSelected(SelectionEvent event) {
		        FileDialog dlg = new FileDialog(shell, SWT.MULTI);
		        dlg.setFilterExtensions(new String[]{"*.pdf"});
		        dlg.open();
		        fileName = dlg.getFileName();
		        label.setText("Filename: " + fileName);
		        filePath = dlg.getFilterPath();
		    }
            /**
             * Removes any value of the fileName variable from the file name label on default selection of the
             * file upload button
             * @param event     Any default selection event, which is platform specific
             */
		    public void widgetDefaultSelected(SelectionEvent event) {
		        label.setText("Filename: ");
		    }
		});
		/**
		 * A Group object that acts as the parent of all the keyword text widgets
		 */
		Group keywords = new Group(content, SWT.NULL);
		keywords.setText("Keywords");
		gridLayout = new GridLayout();
		gridLayout.numColumns = 2;
		keywords.setLayout(gridLayout);
		gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
		gridData.horizontalSpan = 2;
		gridData.horizontalAlignment = SWT.FILL;
		gridData.verticalAlignment = SWT.BEGINNING;
		gridData.grabExcessHorizontalSpace = true;
		gridData.grabExcessVerticalSpace = false;
		keywords.setLayoutData(gridData);
		/**
		 * A text box that allows the user to enter the value for keyword one
		 */
        Text keyword1 = new Text(keywords, SWT.BORDER);
        keyword1.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
        /**
		 * A text box that allows the user to enter the value for keyword two
		 */
        Text keyword2 = new Text(keywords, SWT.BORDER);
        keyword2.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
        /**
		 * A text box that allows the user to enter the value for keyword three
		 */
        Text keyword3 = new Text(keywords, SWT.BORDER);
        keyword3.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
        /**
		 * A text box that allows the user to enter the value for keyword four
		 */
        Text keyword4 = new Text(keywords, SWT.BORDER);
        keyword4.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
        /**
		 * A text box that allows the user to enter the value for keyword five
		 */
        Text keyword5 = new Text(keywords, SWT.BORDER);
        keyword5.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
        /**
		 * A text box that allows the user to enter the value for keyword six
		 */
        Text keyword6 = new Text(keywords, SWT.BORDER);
        keyword6.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
        /**
         * Button for initiating process to generate a PDF file that contains a report based on keywords
         */
        final Button fileSubmitButton = new Button(content, SWT.PUSH);
        fileSubmitButton.setText("Generate Report");
        fileSubmitButton.setLayoutData(new GridData(SWT.FILL, SWT.END, true, false));
        /**
         * Label that prints instructions and results of report generation process
         */
        Label result = new Label(content, SWT.NONE);
        gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 3;
        result.setLayoutData(gridData);
        result.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
		result.setText("Enter up to 6 keywords");
        
        fileSubmitButton.addSelectionListener(new SelectionListener() {
        	/**
        	 * When the generate report button is clicked and at least one keyword has been entered, the
        	 * generateReport method of the ReportGenerator class is invoked and a PDF file containing the report
        	 * is created in the same directory as the PDF file for which the report is being created
        	 * @param event     The click of the fileSubmitButton
        	 */
        	public void widgetSelected(SelectionEvent event) {
		        try {
					words[0] = keyword1.getText();
					words[1] = keyword2.getText();
					words[2] = keyword3.getText();
					words[3] = keyword4.getText();
					words[4] = keyword5.getText();
					words[5] = keyword6.getText();
					if (words[0].length() == 0 && words[1].length() == 0 && words[2].length() == 0 && words[3].length() == 0 && words[4].length() == 0 && words[5].length() == 0) {
						result.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
						result.setText("Please enter at least one keyword");
					}
					else if (getSaveLocationPath().length() == 0) {
						result.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
						result.setText("Enter a valid location to save report");
					}
					else {
						ReportGenerator.generateReport(new File(filePath + "\\" + fileName));
						result.setForeground(display.getSystemColor(SWT.COLOR_DARK_GREEN));
						result.setText("Report successfully generated at: " + getSaveLocationPath());
					}
				} catch (IOException e) {
					result.setForeground(display.getSystemColor(SWT.COLOR_RED));
					result.setText("Failed to generate report");
				}
		    }
            /**
             * When a default selection occurs for the generate reports button, nothing happens
             * @param event     Any default selection event, which is platform specific
             */
		    public void widgetDefaultSelected(SelectionEvent event) {
		        
		    }
        });
        
        saveButton.addSelectionListener(new SelectionListener() {
        	/**
        	 * Upon click of the save button, a file dialog is opened that allows user to choose a save directory
        	 * and the value of this file path is saved to the saveLocationPath property and the save label text
        	 * is updated with the value of this directory
        	 * @param event     Click of the button
        	 */
        	public void widgetSelected(SelectionEvent event) {
        		DirectoryDialog dlg = new DirectoryDialog(shell);
		        setSaveLocationPath(dlg.open());
		        saveLabel.setText("Save location: " + getSaveLocationPath());
        	}
        	/**
        	 * Upon default selection of the button, there is no change to the state of the system
        	 * @param event     Any default selection, which is platform specific
        	 */
        	public void widgetDefaultSelected(SelectionEvent event) {
        		
        	}
        });
        
        report.setControl(content);
        
        return report;
	}
	/**
	 * Provides the UI functionality for the second tab in the main TabFolder, which is concerned with the metrics
	 * generation feature
	 * @param tf          The TabFolder to which the TabItem belongs to
	 * @param shell       The Shell to which param tf belongs to
	 * @param display     The Display to which param shell belongs to
	 * @return            A TabItem representing the metrics tab
	 */
	private static TabItem tab2(TabFolder tf, Shell shell, Display display) {
		fileName = "";
		genValueCount = 0;
		setSaveLocationPath("");
		/**
		 * The TabItem that represents the metrics tab
		 */
		TabItem charts = new TabItem(tf, SWT.BORDER);
		charts.setText("Metrics");
		/**
		 * The Composite that will act as the parent for all the widgets in the tab
		 */
		Composite content = new Composite(tf, SWT.NONE);
		/**
		 * A three column grid layout for the main Composite in the metrics tab
		 */
		GridLayout gridLayout = new GridLayout(3, true);
		gridLayout.horizontalSpacing = 10;
		gridLayout.marginLeft = 5;
		gridLayout.marginTop = 5;
		content.setLayout(gridLayout);
		content.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
		/**
		 * The file name label that will be filled with the value of the fileName variable after a file is selected
		 * in the FileDialog
		 */
        Label label = new Label(content, SWT.NONE);
        label.setText("Filename: ");
        /**
         * GridData object for the file name label that allows the label to fill extra horizontal space and cover
         * two columns of the composite's grid layout
         */
        GridData gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 2;
        label.setLayoutData(gridData);
		/**
		 * A button that opens a FileDialog when clicked and allows the user to select a PDF file
		 */
		final Button fileUploadButton = new Button(content, SWT.PUSH);
		fileUploadButton.setText("Choose File...");
		fileUploadButton.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
		/**
		 * Displays the directory that is selected by the user in the save file dialog
		 */
		Label saveLabel = new Label(content, SWT.NONE);
		gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 2;
        saveLabel.setLayoutData(gridData);
        saveLabel.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
        saveLabel.setText("Save location: ");
        /**
         * Button that allows the user to select the directory where the generated report will be saved
         */
        Button saveButton = new Button(content, SWT.PUSH);
        saveButton.setText("Save...");
        saveButton.setLayoutData(new GridData(SWT.FILL, SWT.END, true, false));
		
		SelectionListener chooseFileListener1 = new SelectionListener() {
			/**
			 * When a widget is selected, opens a FileDialog and sets the fileName variable to the
			 * file name of the file selected by the user, sets the filePath variable to the file path of the file
			 * selected and alters the file name label by the value of the fileName variable
			 * @param event     The click of the button
			 */
			public void widgetSelected(SelectionEvent event) {
		        FileDialog dlg = new FileDialog(shell, SWT.MULTI);
		        dlg.setFilterExtensions(new String[]{"*.pdf"});
		        dlg.open();
		        fileName = dlg.getFileName();
		        label.setText("Filename: " + fileName);
		        filePath = dlg.getFilterPath();
		    }
            /**
             * When there is a default selection event on the widget, any value from the fileName variable inside
             * the file name label is removed
             * @param event     Any default selection event, which is platform specific
             */
		    public void widgetDefaultSelected(SelectionEvent event) {
		        label.setText("Filename: ");
		    }
		};
		
		fileUploadButton.addSelectionListener(chooseFileListener1);
		
		saveButton.addSelectionListener(new SelectionListener() {
        	/**
        	 * Upon click of the save button, a file dialog is opened that allows user to choose a save directory
        	 * and the value of this file path is saved to the saveLocationPath property and the save label text
        	 * is updated with the value of this directory
        	 * @param event     Click of the button
        	 */
        	public void widgetSelected(SelectionEvent event) {
        		DirectoryDialog dlg = new DirectoryDialog(shell);
		        setSaveLocationPath(dlg.open());
		        saveLabel.setText("Save location: " + getSaveLocationPath());
        	}
        	/**
        	 * Upon default selection of the button, there is no change to the state of the system
        	 * @param event     Any default selection, which is platform specific
        	 */
        	public void widgetDefaultSelected(SelectionEvent event) {
        		
        	}
        });
        /**
         * Prints the result of the metrics generation process
         */
        Label result = new Label(content, SWT.NONE);
        gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 2;
        result.setLayoutData(gridData);
        result.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
		result.setText("");
		/**
		 * Button for initiating the metrics generation process for a PDF file
		 */
		final Button fileSubmitButton = new Button(content, SWT.PUSH);
        fileSubmitButton.setText("Generate Values");
        fileSubmitButton.setLayoutData(new GridData(SWT.FILL, SWT.END, true, false));
        /**
         * Label that highlights the intent of the searchText text box
         */
        Label searchLabel = new Label(content, SWT.NONE);
        gridData = new GridData(SWT.END, SWT.BEGINNING, true, false);
        searchLabel.setLayoutData(gridData);
        searchLabel.setText("Search by metric:");
        /**
         * Text box for entering a search string for which results will be displayed in the metrics table,
         * searching on the metrics column
         */
        Text searchText = new Text(content, SWT.BORDER);
        searchText.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
        /**
         * Button that initiates the search for metrics whose metrics column matches the search string entered
         */
        final Button searchButton = new Button(content, SWT.PUSH);
        searchButton.setText("Search");
        searchButton.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
        /**
         * Table that holds the values of all metrics found in the PDF file, by metric, value and date
         */
        Table table = new Table(content, SWT.BORDER);
        table.setHeaderVisible(true);
        gridData = new GridData(SWT.FILL, SWT.FILL, true, false);
        gridData.horizontalSpan = 3;
        gridData.verticalSpan = 20;
        /**
         * The height of one row of the table
         */
        int tableItemHeight = table.getItemHeight();
		gridData.heightHint = 20 * tableItemHeight;
        table.setLayoutData(gridData);
        /**
         * An array that stores the names of the columns in the table
         */
        String[] colTitles = {"Metric", "Value", "Date"};
        
        for (int j = 0; j < colTitles.length; j++) {
        	/**
        	 * TableColumn for each string in colTitles
        	 */
        	TableColumn col = new TableColumn(table, SWT.NULL);
        	col.setText(colTitles[j]);
        }
        
        fileSubmitButton.addSelectionListener(new SelectionListener() {
        	/**
        	 * On the click of the generate metrics button, if a file has been selected the generateMetrics method
        	 * of the MetricsGenerator class is invoked and an ArrayList of metrics is stored in outputMetrics. For
        	 * each metric, a TableItem is then created, splitting on a purposefully provided separator to generate
        	 * three values per TableItem corresponding to the three columns. If this was the first initiation of
        	 * the metrics generation process in the session, a new selection listener is attached to the file
        	 * upload button in order to remove any existing data in the table or outputMetrics in preparation
        	 * for another metrics generation process for another PDF file
        	 * @param event     The click of the button
        	 */
        	public void widgetSelected(SelectionEvent event) {
		        try {
					if (fileName.length() == 0) {
						result.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
						result.setText("You must choose a file before generating values");
					}
					else {
						try {
							outputMetrics = MetricsGenerator.generateMetrics(new File(filePath + "\\" + fileName));
							if (outputMetrics.size() == 1 && (outputMetrics.get(0).contains("-----") == false)) {
								result.setForeground(display.getSystemColor(SWT.COLOR_RED));
							    result.setText(outputMetrics.get(0));
							}
							else {
							    result.setForeground(display.getSystemColor(SWT.COLOR_DARK_GREEN));
							    result.setText("Values successfully generated");
							
							    for (int i = 0; i < outputMetrics.size(); i++) {
					        	    /**
					        	     * A TableItem corresponding to a row in the table for each metric
					        	     */
								    TableItem tItem = new TableItem(table, SWT.NULL);
								    /**
								     * A row of outputMetrics split into an array whose elements correspond to the
								     * metric/value/date columns
								     */
					        	    String[] metricsRowData = outputMetrics.get(i).split(" ----- ");
					        	    tItem.setText("Item" + i);
					        	
					        	    for (int k = 0; k < metricsRowData.length; k++) {
					        		    tItem.setText(k, metricsRowData[k]);
					        	    }
					            }
							
							    for (int l = 0; l < colTitles.length; l++) {
								    table.getColumn(l).pack();
							    }
							
							    if (genValueCount == 0) {
								    fileUploadButton.removeSelectionListener(chooseFileListener1);
								    fileUploadButton.addSelectionListener(new SelectionListener() {
									    /**
									     * On click of the button a FileDialog is opened and if the user opens a new
									     * file the table and outputMetrics are cleared and the values of fileName,
									     * filePath and file name label are updated
									     * @param event     The click of the button event
									     */
			                            public void widgetSelected(SelectionEvent event) {
			                        	    /**
			                        	     * A dialog box that allows the user to select a PDF file from their file
			                        	     * system
			                        	     */
		                                    FileDialog dlg = new FileDialog(shell, SWT.MULTI);
		                                    dlg.setFilterExtensions(new String[]{"*.pdf"});
		                                    if (dlg.open() != null) {
		                                	    table.removeAll();
		                                	    outputMetrics.clear();
		    							        result.setText("");
		    							        fileName = dlg.getFileName();
		    							        filePath = dlg.getFilterPath();
		    							        label.setText("Filename: " + fileName);
		                                    }
		                                }
                                        /**
                                         * On a default selection of the fileUploadButton, any value from the fileName
                                         * variable is removed from the file name label
                                         * @param event     Any default selection event, which is platform specific
                                         */
		                                public void widgetDefaultSelected(SelectionEvent event) {
		                                    label.setText("Filename: ");
		                                }
		                            });
								    genValueCount++;
							    }
							}
						    }
						catch (InterruptedException ie) {
							result.setForeground(display.getSystemColor(SWT.COLOR_RED));
							result.setText("Metrics generation process was interrupted");
						}
					}
				} catch (IOException e) {
					result.setForeground(display.getSystemColor(SWT.COLOR_RED));
					result.setText("Failed to generate metrics");
				}
		    }
            /**
             * On a default selection of the generate metrics button, nothing happens
             * @param event    Any default selection event, which is platform specific
             */
		    public void widgetDefaultSelected(SelectionEvent event) {
		        
		    }
        });
        
        searchButton.addSelectionListener(new SelectionListener() {
        	/**
        	 * On click of the search button, if the search string length is greater than zero, existing table
        	 * items are removed and new table items containing the value of the search string in their metric
        	 * column are generated. If the search bar is empty and metrics have already been generated previously,
        	 * all metrics are displayed in the table on click of the button.
        	 * @param event     Click of the button
        	 */
        	public void widgetSelected(SelectionEvent event) {
        		/**
        		 * The value of the text entered in the search text box
        		 */
        		String searchTextVal = searchText.getText();
        		if (searchTextVal.length() > 0) {
        			table.removeAll();
        			
        			if (outputMetrics.size() == 1 && (outputMetrics.get(0).contains("-----") == false)) {
        				
        			}
        			else {
        			    for (int m = 0; m < outputMetrics.size(); m++) {
        				    /**
        				     * The metric row split into an array whose values correspond to a column of the table from
        				     * left to right
        				     */
        				    String[] metricsRowData2 = outputMetrics.get(m).split(" ----- ");
        				    if (metricsRowData2.length > 0 && metricsRowData2[0].contains(searchTextVal)) {
        					    /**
        					     * A TableItem corresponding to a row in the table for each metric that contains the 
        					     * provided search string
        					     */
        					    TableItem tItem2 = new TableItem(table, SWT.NULL);
        					    for (int n = 0; n < metricsRowData2.length; n++) {
        						    tItem2.setText(n, metricsRowData2[n]);
        					    }
        				    }
        			    }
        			
        			    for (int o = 0; o < colTitles.length; o++) {
        				    table.getColumn(o).pack();
        			    }
        			}
        		}
        		else if (searchTextVal.length() == 0 && outputMetrics.size() > 0) {
        			if (outputMetrics.size() == 1 && (outputMetrics.get(0).contains("-----") == false)) {
        				
        			}
        			else {
        			    for (int p = 0; p < outputMetrics.size(); p++) {
        				    /**
        				     * A TableItem for a row in the table for each metric
        				     */
			        	    TableItem tItem = new TableItem(table, SWT.NULL);
			        	    /**
			        	     * The values of each metric row split into an array containing the values that correspond
			        	     * to each column of the table
			        	     */
			        	    String[] metricsRowData = outputMetrics.get(p).split(" ----- ");
			        	    tItem.setText("Item" + p);
			        	
			        	    for (int q = 0; q < metricsRowData.length; q++) {
			        		    tItem.setText(q, metricsRowData[q]);
			        	    }
			            }
					
					    for (int r = 0; r < colTitles.length; r++) {
						    table.getColumn(r).pack();
					    }
        		    }
        		}
        	}
        	/**
        	 * On a default selection of the search button, nothing happens
        	 * @param event    Any default selection event, which is platform specific 
        	 */
        	public void widgetDefaultSelected(SelectionEvent event) {
        		
        	}
        });
        
        charts.setControl(content);
        
        return charts;
	}
	/**
	 * The UI functionality for the third tab in the TabFolder, relating to the table generation and export feature
	 * @param tf          The TabFolder that is the parent of the tab
	 * @param shell       The Shell that is the parent of param tf
	 * @param display     The Display that is the parent of param shell
	 * @return            A TabItem that contains the UI functionality for the tables tab
	 */
	private static TabItem tab3(TabFolder tf, Shell shell, Display display) {
		fileName = "";
		setSaveLocationPath("");
		/**
		 * A TabItem that holds all the widgets for tab three
		 */
		TabItem tables = new TabItem(tf, SWT.BORDER);
		tables.setText("Tables");
		/**
		 * A Composite that acts as the parent for all the widgets in tab three
		 */
        Composite content = new Composite(tf, SWT.NONE);
		/**
		 * A three column grid layout for Composite content
		 */
		GridLayout gridLayout = new GridLayout(3, true);
		gridLayout.horizontalSpacing = 10;
		gridLayout.marginLeft = 5;
		gridLayout.marginTop = 5;
		content.setLayout(gridLayout);
		content.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
		/**
		 * A label that holds the file name of the file selected in the FileDialog opened upon click of the
		 * fileUploadButton
		 */
        Label label = new Label(content, SWT.NONE);
        label.setText("Filename: ");
        /**
         * GridData object for the file name label that allows the label to fill any extra horizontal space and
         * allows the label to span two columns of the parent composite's grid layout
         */
        GridData gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 2;
        label.setLayoutData(gridData);
		/**
		 * A button for selecting a PDF file from the user's file system
		 */
		final Button fileUploadButton = new Button(content, SWT.PUSH);
		fileUploadButton.setText("Choose File...");
		fileUploadButton.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
		/**
		 * Displays the directory that is selected by the user in the save file dialog
		 */
		Label saveLabel = new Label(content, SWT.NONE);
		gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 2;
        saveLabel.setLayoutData(gridData);
        saveLabel.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
        saveLabel.setText("Save location: ");
        /**
         * Button that allows the user to select the directory where the generated report will be saved
         */
        Button saveButton = new Button(content, SWT.PUSH);
        saveButton.setText("Save...");
        saveButton.setLayoutData(new GridData(SWT.FILL, SWT.END, true, false));
		
		SelectionListener chooseFileListener1 = new SelectionListener() {
			/**
			 * Upon selection of the widget, a FileDialog is opened and the fileName, filePath and file name label
			 * variables are updated with the file name, file path and file name respectively for the file 
			 * selected by the user
			 * @param event     The selection of the widget
			 */
			public void widgetSelected(SelectionEvent event) {
		        FileDialog dlg = new FileDialog(shell, SWT.MULTI);
		        dlg.setFilterExtensions(new String[]{"*.pdf"});
		        dlg.open();
		        fileName = dlg.getFileName();
		        label.setText("Filename: " + fileName);
		        filePath = dlg.getFilterPath();
		    }
            /**
             * Upon default selection of the widget, any value of the fileName variable is removed from the file 
             * name label
             * @param event     Any default selection event, which is platform specific
             */
		    public void widgetDefaultSelected(SelectionEvent event) {
		        label.setText("Filename: ");
		    }
		};
		
		fileUploadButton.addSelectionListener(chooseFileListener1);
		
		saveButton.addSelectionListener(new SelectionListener() {
        	/**
        	 * Upon click of the save button, a file dialog is opened that allows user to choose a save directory
        	 * and the value of this file path is saved to the saveLocationPath property and the save label text
        	 * is updated with the value of this directory
        	 * @param event     Click of the button
        	 */
        	public void widgetSelected(SelectionEvent event) {
        		DirectoryDialog dlg = new DirectoryDialog(shell);
		        setSaveLocationPath(dlg.open());
		        saveLabel.setText("Save location: " + getSaveLocationPath());
        	}
        	/**
        	 * Upon default selection of the button, there is no change to the state of the system
        	 * @param event     Any default selection, which is platform specific
        	 */
        	public void widgetDefaultSelected(SelectionEvent event) {
        		
        	}
        });
		/**
		 * Label that holds a sentence detailing the result of the table generation process
		 */
		Label resultLabel = new Label(content, SWT.NONE);
        gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 2;
        resultLabel.setLayoutData(gridData);
        resultLabel.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
		resultLabel.setText("");
		/**
		 * Button that, on click, initiates the table generation process
		 */
		final Button fileSubmitButton = new Button(content, SWT.PUSH);
        fileSubmitButton.setText("Generate Tables");
        fileSubmitButton.setLayoutData(new GridData(SWT.FILL, SWT.END, true, false));
        /**
         * A composite that is the parent of the list column and table
         */
        final Composite listAndTable = new Composite(content, SWT.NONE);
        gridLayout = new GridLayout(5, true);
        listAndTable.setLayout(gridLayout);
        gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        gridData.horizontalSpan = 3;
        listAndTable.setLayoutData(gridData);
        
        fileSubmitButton.addSelectionListener(new SelectionListener() {
        	/**
        	 * On click of the generate tables button, any existing widgets in the listAndTable composite are first
        	 * disposed. A new process is initiated that executes a Python file and the standard output of the
        	 * execution is read into an ArrayList. The conjureTables method of the PdfTable class is invoked,
        	 * which generates a list of lists of individual tables from this ArrayList. A new PdfTable object is
        	 * created for each individual table and the generateList method of the PdfTable class is invoked which
        	 * takes the list of PdfTable objects and creates a list, export button and set of tables.
        	 * @param event     The click of the button
        	 */
        	public void widgetSelected(SelectionEvent event) {
        		try {
        			/**
        			 * A control that is a child of the listAndTable composite
        			 */
        			for (Control control : listAndTable.getChildren()) {
        				control.dispose();
        			}
        			/**
        			 * A composite that will hold the list of tables and an export button and result/instructions
        			 * label
        			 */
        			final Composite listContent = new Composite(listAndTable, SWT.NONE);
        	        /**
        	         * A grid layout for the listContent composite that is divided into five columns
        	         */
        			GridLayout gridLayout = new GridLayout(5, true);
        	        listContent.setLayout(gridLayout);
        	        /**
        	         * A GridData object for the listContent composite that allows the composite to fill extra
        	         * horizontal space and defines the span of the composite to take up only one of the five 
        	         * columns in the listAndTable composite's grid layout
        	         */
        	        GridData gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, false);
        	        gridData.horizontalSpan = 1;
        	        listContent.setLayoutData(gridData);
        			/**
        			 * A ProcessBuilder object for executing a Python file that contains table extraction
        			 * functionality
        			 */
        			ProcessBuilder pb = new ProcessBuilder("python", "res/tabula_real.py", filePath + "/" + fileName);
        			pb.redirectErrorStream(true);
        			/**
        			 * ArrayList for storing lines from standard output of execution of Python file
        			 */
        			ArrayList<String> result = new ArrayList<String>();
        			/**
        			 * Process object that handles the execution of the Python file
        			 */
        			Process process = pb.start();
        			/**
        			 * Reads data from the input stream provided by the Process object from the standard output
        			 */
        			BufferedReader bfr = new BufferedReader(new InputStreamReader(process.getInputStream()));
        			/**
        			 * One line of the standard output of the execution of the Python file
        			 */
        			String line = bfr.readLine();
        			while (line != null) {
        				result.add(line);
        				line = bfr.readLine();
        			}
        			try {
						process.waitFor();
						/**
						 * Holds a list of tables and a list of rows in each table
						 */
						ArrayList<ArrayList<String>> individualTables = PdfTable.conjureTables(result);
						/**
						 * Holds a list of PdfTable objects for each table
						 */
						ArrayList<PdfTable> uiTables = new ArrayList<PdfTable>();
						
						for (int i = 0; i < individualTables.size(); i++) {
							uiTables.add(new PdfTable(individualTables.get(i)));
						}
						
						// TEST TABLE
						if (uiTables.size() > 0) {
							PdfTable.generateList(shell, listContent, listAndTable, uiTables);
							resultLabel.setForeground(display.getSystemColor(SWT.COLOR_DARK_GREEN));
							resultLabel.setText("Tables successfully generated. To view a table, click on an item in the list.");
							shell.layout();
						}
						else {
							resultLabel.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
							resultLabel.setText("No tables were found");
						}
					} catch (InterruptedException e) {
						resultLabel.setForeground(display.getSystemColor(SWT.COLOR_RED));
						resultLabel.setText("Table generation process was interrupted");
						System.out.println("Table generation process was interrupted");
					}
        		}
        		catch (IOException ioe) {
        			System.out.println("Failed to load file");
        		}
		    }
            /**
             * Upon default selection of the generate tables button, there is no change to the state of the system
             * @param event     Any default selection event, which is platform specific
             */
		    public void widgetDefaultSelected(SelectionEvent event) {
		        
		    }
        });
        
        tables.setControl(content);
        
        return tables;
    }
	/**
	 * Main method that creates the display, shell, tab layout and several tab items
	 * @param args     Command line arguments
	 */
	public static void main(String[] args) {
		/**
		 * Display object for handling the connection between the program and operating system
		 */
		Display display = Display.getDefault();
		/**
		 * Shell object that represents the window of the application
		 */
		Shell shell = new Shell(display);
		shell.setLayout(new GridLayout(1, false));
		shell.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
		/**
		 * A TabFolder object for holding various tabs in order to separate functionality to show on different
		 * screens
		 */
		TabFolder tf = new TabFolder(shell, SWT.BORDER);
		/**
		 * A grid layout for the TabFolder tf with one column
		 */
		GridLayout tfGridLayout = new GridLayout(1, true);
		tfGridLayout.horizontalSpacing = 10;
		tfGridLayout.marginLeft = 5;
		tfGridLayout.marginTop = 5;
		tf.setLayout(tfGridLayout);
		tf.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
		/**
		 * A new TabItem that holds widgets for the automated report generation feature
		 */
		TabItem report = tab1(tf, shell, display);
        /**
         * A new TabItem that holds widgets for the automated metrics generation feature
         */
        TabItem charts = tab2(tf, shell, display);
        /**
         * A new TabItem that holds widgets for the automated table generation and export feature
         */
        TabItem tables = tab3(tf, shell, display);
		
		shell.setSize(1000, 500);
		shell.setText("PDF Data Extraction Tool");

		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
	}
}